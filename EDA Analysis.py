# -*- coding: utf-8 -*-
"""prac_EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LWFzWubXqSy07yEUPEKBJI0yufp9-dOP
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn import metrics

cusine=pd.read_csv('/content/drive/MyDrive/DAEP/cusine.csv')

cusine.info()

cusine.columns

cusine.isnull()

cusine.nunique()

plt.figure(figsize=(8,2))
sns.countplot(x='Activity',data=cusine)

sns.countplot(x='Activity',hue='Gender',data=cusine)

sns.countplot(x='Activity',hue='Marital Status',data=cusine)

plt.hist(cusine['YOB'].dropna())

plt.hist(cusine['Area code'])

sns.heatmap(cusine.isnull(), cbar=False)

#since there was no missing data so no need for imputation or dropping the column
sex_data=pd.get_dummies(cusine['Gender'], drop_first=True)
smoker_data = pd.get_dummies(cusine['Smoker'], drop_first = True)

sex_data

smoker_data

cusine = pd.concat([cusine, sex_data, smoker_data], axis = 1)

cusine.info()

cusine.columns

cusine.drop(['User ID', 'Marital Status', 'Smoker',], axis = 1, inplace = True)

#dropping the unnecessay columns
cusine.drop(['Location'],axis=1,inplace=True)
cusine.drop(['Gender'],axis=1,inplace=True)
cusine.drop(['Cuisines','Often A S'],axis=1,inplace= True)

cusine.columns

cusine.info()

cusine

#applying logistic regression
y_data = cusine['Activity']
x_data = cusine.drop('Activity', axis = 1)

y_data

x_data

#Splitting the data
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size = 0.3)

#building model
model = LogisticRegression()
model.fit(x_train,y_train)

#Predicting model
y_pred=model.predict(x_test)

#classification_report
print(classification_report(y_test, y_pred))

#confusion matrix
print(confusion_matrix(y_test, y_pred))

